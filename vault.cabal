cabal-version:      3.4
name:               vault
version:            0.3.1.5
synopsis:           a persistent store for values of arbitrary types
description:
  A /vault/ is a persistent store for values of arbitrary types.
  It's like having first-class access to the storage space behind IORefs.
  .
  The data structure is analogous to a bank vault,
  where you can access different bank boxes with different keys;
  hence the name.
  .
  Also provided is a /locker/ type, representing a store for a single element.

category:           Data
license:            BSD-3-Clause
license-file:       LICENSE
author:             Heinrich Apfelmus, Elliott Hird
maintainer:         Heinrich Apfelmus <apfelmus at quantentunnel de>
homepage:           https://github.com/HeinrichApfelmus/vault
copyright:          (c) Heinrich Apfelmus 2011-2013
tested-with:
  GHC ==8.0.2
   || ==8.2.2
   || ==8.4.4
   || ==8.6.5
   || ==8.8.4
   || ==8.10.7
   || ==9.0.2
   || ==9.2.8
   || ==9.4.8
   || ==9.6.7
   || ==9.8.4
   || ==9.10.2
   || ==9.12.2

extra-source-files:
  CHANGELOG.md
  README.md
  src/Data/Vault/IO.h
  src/Data/Vault/ST/backends/GHC.h
  src/Data/Vault/ST/ST.h

source-repository head
  type:     git
  location: https://github.com/HeinrichApfelmus/vault.git

flag UseGHC
  description: Use GHC-specific packages and extensions.
  default:     True

library
  default-language:   Haskell2010
  default-extensions: CPP
  build-depends:
    , base                  >=4.9     && <4.22
    , containers            >=0.4     && <0.9
    , hashable              >=1.1.2.5 && <1.6
    , unordered-containers  >=0.2.3.0 && <0.3

  ghc-options:        -Wall -fno-warn-missing-signatures
  hs-source-dirs:     src
  exposed-modules:
    Data.Unique.Really
    Data.Vault.Lazy
    Data.Vault.ST.Lazy
    Data.Vault.ST.Strict
    Data.Vault.Strict

  if (impl(ghc) && flag(useghc))
    cpp-options: -DUseGHC
